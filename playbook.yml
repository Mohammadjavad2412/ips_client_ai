- hosts: ics-sec
  become: yes
  become_user: root
  gather_facts: yes

  # Variables
  vars:
    ansible_python_interpreter: /usr/bin/python3
    pg:
      dbname: "clientdb"
      username: "clientuser"
      password: "clientpass"
    containers:
      postgresql:
        ip_address: "10.27.95.33"
        port: "5432"
      clientapi:
        ip_address: "10.27.95.200"
      elastic:
        ip_address: "10.27.95.8"
        port: "9200"
      kibana:
        ip_address: "10.27.95.8"
        port: "5601"
      server:
        url: "https://ips.npd-co.com"
      ntopng:
        ip_address: "10.27.95.102"
        port: 3000
    snort:
      lua_path: "/opt/snort-latest/lua"
      rules_path: "/etc/snort/rules"
      conf_path: "/etc/snort/snort.conf"
      log_path: "/var/log/snort"
      restart_command: "sudo systemctl restart snort"
    snort2lua:
      binary_path: "/opt/snort3-3.1.43.0/build/tools/snort2lua"
    elk:
      username: "elastic"
      password: "Admin@123"

  # List of tasks
  tasks:

  - name: Copy application 
    ansible.builtin.copy:
      src: "/home/ansible/{{ item }}"
      dest: "/tmp/{{ item }}"
      owner: root
      group: root
      mode: '0644'
    with_items:
      - app.tar.gz
      - clientapi.service
      - "00-clientapi.conf"
      - clientapisrv

  - name: Copy env template to tmp
    ansible.builtin.template:
      src: "/home/ansible/env.j2"
      dest: "/tmp/.env"
      mode: '0644'

  - name: Ensure postgresql IP address is present in dnsmasq configuration
    ansible.builtin.lineinfile:
      path: /etc/lxc/dnsmasq.conf
      regexp: '^dhcp-host=postgresql'
      line: 'dhcp-host=postgresql,{{ containers.postgresql.ip_address }}'
      create: true
    notify:
    - Restart lxd network

  - name: Flush Handlers
    meta: flush_handlers

  - name: Create postgres container
    ansible.builtin.command:
      cmd: /snap/bin/lxc launch ubuntu:20.04 postgresql
      creates: /var/snap/lxd/common/lxd/containers/postgresql

  - name: Make sure container is started
    community.general.lxd_container:
      name: postgresql
      state: started

  - name: setup postgresql container
    ansible.builtin.shell: |
      /snap/bin/lxc exec postgresql -- /bin/bash -c "echo 192.168.1.50 nexus >/etc/hosts && echo deb http://nexus:8081/repository/apt-proxy/ubuntu jammy-updates main restricted universe > /etc/apt/sources.list && echo deb http://nexus:8081/repository/apt-proxy/ubuntu jammy main restricted universe >> /etc/apt/sources.list"      
      /snap/bin/lxc exec postgresql -- /bin/bash -c "apt-get update &&  DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' -y -q"
      /snap/bin/lxc exec postgresql -- /bin/bash -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install postgresql -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' -y -q"
      /snap/bin/lxc exec postgresql -- /bin/bash -c "cd /var/lib/postgresql; sudo -u postgres psql -U postgres -tc \"SELECT 1 FROM pg_database WHERE datname = '{{ pg.dbname }}'\" | grep -q 1 || sudo -u postgres psql -U postgres -tc \"CREATE DATABASE {{ pg.dbname }};\""
      /snap/bin/lxc exec postgresql -- /bin/bash -c "cd /var/lib/postgresql; sudo -u postgres psql -U postgres -tc \"SELECT count(*) FROM pg_user WHERE usename = '{{ pg.username}}'\" | grep -q 1 || sudo -u postgres psql -U postgres -tc \"CREATE USER {{ pg.username }} with encrypted password '{{ pg.password }}';\""
      /snap/bin/lxc exec postgresql -- /bin/bash -c "cd /var/lib/postgresql; sudo -u postgres psql -U postgres -tc \"GRANT ALL PRIVILEGES ON DATABASE {{ pg.dbname }} TO {{ pg.username }};\""
      /snap/bin/lxc exec postgresql -- /bin/bash -c "echo \"listen_addresses = '*'\" >>/etc/postgresql/14/main/postgresql.conf"
      /snap/bin/lxc exec postgresql -- /bin/bash -c "echo 'host  all  all  0.0.0.0/0  scram-sha-256' >>/etc/postgresql/14/main/pg_hba.conf"
      /snap/bin/lxc exec postgresql -- /bin/bash -c "echo 'host  all  all  ::0/0  scram-sha-256' >>/etc/postgresql/14/main/pg_hba.conf"
      /snap/bin/lxc exec postgresql -- /bin/bash -c "systemctl restart postgresql"

  - name: Ensure clientapi IP address is present in dnsmasq configuration
    ansible.builtin.lineinfile:
      path: /etc/lxc/dnsmasq.conf
      regexp: '^dhcp-host=ips1'
      line: 'dhcp-host=ips1,{{ containers.clientapi.ip_address }}'
    notify:
    - Restart lxd network

  - name: Flush Handlers
    meta: flush_handlers

  - name: Create clientapi container
    ansible.builtin.command:
      cmd: /snap/bin/lxc launch ubuntu:20.04 ips1
      creates: /var/snap/lxd/common/lxd/containers/ips1

  - name: Make sure ips1 container is started
    community.general.lxd_container:
      name: ips1
      state: started
      
  - name: setup clientapi container
    ansible.builtin.shell: |
      /snap/bin/lxc exec ips1 -- /bin/bash -c "echo 192.168.1.50 nexus >/etc/hosts && echo deb http://nexus:8081/repository/apt-proxy/ubuntu jammy-updates main restricted universe > /etc/apt/sources.list && echo deb http://nexus:8081/repository/apt-proxy/ubuntu jammy main restricted universe >> /etc/apt/sources.list"      
      /snap/bin/lxc exec ips1 -- /bin/bash -c "apt-get update &&  DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' -y -q"
      /snap/bin/lxc exec ips1 -- /bin/bash -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install python3 python3-pip -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' -y -q"
      /snap/bin/lxc file push /tmp/app.tar.gz ips1/tmp/app.tar.gz
      /snap/bin/lxc file push /tmp/clientapi.service ips1/usr/lib/systemd/system/clientapi.service
      /snap/bin/lxc file push /tmp/00-clientapi.conf ips1/etc/rsyslog.d/00-clientapi.conf
      /snap/bin/lxc file push /tmp/clientapisrv ips1/etc/logrotate.d/clientapisrv
      /snap/bin/lxc exec ips1 -- /bin/bash -c "grep client /etc/passwd >/dev/null || useradd -d /home/client -m -s /usr/sbin/nologin client && tar -C /home/client -xzf /tmp/app.tar.gz && systemctl enable clientapi.service && mkdir /var/log/clientapisrv && chown syslog:adm /var/log/clientapisrv && systemctl restart rsyslog"
      /snap/bin/lxc exec ips1 -- /bin/bash -c "cd /home/client && /usr/bin/python3 -m pip install --index-url http://nexus:8081/repository/pypi-all/simple --trusted-host nexus -r requirements.txt"
      /snap/bin/lxc file push /tmp/.env ips1/home/client/.env
      /snap/bin/lxc exec ips1 -- /bin/bash -c "systemctl daemon-reload && systemctl restart clientapi.service"      

  handlers:
  - name: Restart lxd network
    ansible.builtin.systemd:
      state: restarted
      name: lxc-net
